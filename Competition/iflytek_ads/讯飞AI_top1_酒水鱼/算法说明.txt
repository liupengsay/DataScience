
算法说明：
       liupeng_demo.py：
               预处理（数据清洗）>--特征工程(统计组合)>--Stacking减少总特征维度（LightGBM）>--训练预测
	1、预处理
	（1）初复赛训练数据合并后去重
	（2）提取广告投放信息，日期、小时以及早中晚时间段
	（3）细分广告主行业与媒体广告位，去除只有一个取值的字段（三个Boolean字段）
	（4）清洗手机品牌和机型字段，对同类进行合并
	（5）对操作系统及其版本、名称进行更细粒度的刻画
	（6）构造虚拟用户组别，对具有相同标签的用户进行统一编码
	（7）对除用户标签以外的类别特征进行独热编码
	2、特征工程
	（1）用户特征提取：
		对用户标签进行CountVectorizer之后利用LightGBM特征重要性提取前100维的标签
	（2）主要特征组别：
		一维+二维count计数特征（如广告主id共计投放次数）
		类别偏好的ratio比例特征(如广告主id的某个广告id投放比例)
		类别变量的nunique特征（如广告主id有多少个不同的广告id）
		用户标签与其他字段的组合mean特征（如广告id对用户性别的投放比例）
	
	（3）特征处理方式：
		由上可知组合特征维度非常大，本次竞赛采用Stacking的办法将组合特征的信息进行降维压缩，最后总计使用特征
		只有一百五十多维
       wanghe_demo.py：
	预处理（数据清洗）>--特征工程(统计组合)>--训练预测
	1、预处理
                （1）初复赛训练数据合并后去重
	（2）提取广告投放信息，日期、小时
	（3）细分广告主行业与媒体广告位，去除只有一个取值的字段（三个Boolean字段）
	（4）清洗手机品牌和机型字段，对同类进行合并
	（5）对操作系统及其版本、名称进行更细粒度的刻画
	（6）构造虚拟用户组别，对具有相同标签的用户进行统一编码
	（7）构造类别间交叉特征，获取更细粒度的信息
	（8）对除用户标签以外的类别特征进行Labelencoder
	2、特征工程
	（1）用户特征提取：
		对用户标签进行CountVectorizer之后利用卡方检验进行特征选择
	（2）主要特征组别：
		对交叉特征进行计数统计构造count特征（如广告主id共计投放次数）
		类别偏好的ratio比例特征（如广告主id的某个广告id投放比例）
		类别变量的nunique特征（如广告主id有多少个不同的广告id）
                                类别变量的点击率特征（考虑到信息泄露带来的过拟合问题，构造了历史转化率特征）
	（3）特征处理方式：
		ratio比例特征的经过lightgbm返回的特征重要性,获取重要性大于10的ratio特征
       wengyp_demo.py:  
	预处理 >--特征工程>-->训练预测
	1、预处理
	   （1）初复赛训练数据合并后去重
	    (2）提取广告投放信息，日期、小时
	    (3) 当water_demo.py中 PROCESSED_FILE 设置为False时，对user_tags进行处理，保留在训练集中出现次数排在较前的tags（目前选取前399个）
		处理后的新训练集和测试文件保存在 data/processed_train_fusai2.csv 和 ./processed_test_fusai2.csv
		如果进行过预处理并保存了文件，则PROCESSED_FILE设置为True,可以大大提高速度，预处理操作只需要进行一次,后续可直接使用处理过的文件。
		
	（3）细分广告主行业与媒体广告位
	（4）清洗手机品牌和机型字段，对同类进行合并，对操作系统及其版本、名称进行更细粒度的刻画(参考队友刘鹏的操作）
	（5）对原始测试集中出现的类别特征，且在原始测试集中的类别数目小于50的特征进行独热编码（参考比赛群内公开的代码）
	2、特征工程
	（1）用户特征提取：
		采用将预处理后的用户特征编码为向量格式，每个用户保留399维的用户向量特征，其中第i维代表第i个tag出现的个数
	（2）主要特征组别：
		计数特征：对部分类别特征计算出现在测试集和训练集中的总数，对媒体特征，部分手机属性和上下文属性进行拼接，进行计数。
			  统计了部分类别特征在对应曝光记录的训练集中前一天中出现的次数。
		组合特征： 对媒体特征，部分手机属性和上下文属性进行拼接,组合作为字符串进行labelEncoder操作加入特征
		
		分段Ratio特征：
		计算部分类别型特征在不同时间段的点击率，包括该曝光前所有数据关于该特征的聚合点击率，以及该曝光发生前一天针对该特征的
		聚合点击率。
	3、模型：
		最后采用单个lightGBM模型，将训练集分为五折进行训练和验证，将各次对测试集的预测结果进行平均即可。
	
总结
      liupeng_demo.py:
                (1) 建模过程中充分考虑了用户标签与其他信息的交互作用（mean特征），并采用Stacking抽取特征信息的
	(2) 方式减少维度与内存的使用，对广告与用户交互信息的充分挖掘，也使得模型在AB榜测试相对稳定
      wengyp_demo.py:
	(1) 对特征处理时考虑了不同时间尺度的历史点击率信息，既利用了历史曝光信息和点击率信息，又能减少过拟合的风险。 
                (2) 对不同类型特征的组合可以增强表达能力，提高预测的效果。
                (3) 对用户标签的筛选可以减少特征的维度并减少噪声。
      wanghe_demo.py:
                (1) 树模型Memorazation更强，记忆特征和标签特征相关特征组合能力强，可以轻松驾驭小数据集比赛，并且有很好的效果。
                (2) 获取更细粒度的表现信息进行交叉特征组合，在推荐类别的场景达到精准推荐的作用。
                (3) 因为user_tags多值特征包含用户的属性信息，所以完美的表达user_tags至关重要，构造特征中不仅考虑了对其进行展开，而且对其中重要属性特征进行扩展，接近完美的表达user_tags。
                (4) user_tags,f_channl缺失值虽然多，但通过数据分析其转化率，可以清楚的看出其区分度。